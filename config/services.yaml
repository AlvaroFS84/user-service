# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    
    App\Infrastructure\Controller\UserController:
        tags: ['controller.service_arguments']
        
    App\Application\Command\CreateUserCommandHandler:
        tags: [messenger.message_handler]
    
    App\Infrastructure\Service\UserRepository:
        arguments:
            $registry: '@doctrine'
        tags: ['doctrine.repository_service']
    
    App\Application\UseCase\CreateUserUseCase:
        arguments:
            $userRepository: '@App\Infrastructure\Repository\DoctrineUserRepository'
    
    App\Domain\Repository\UserRepositoryInterface:
        alias: App\Infrastructure\Repository\DoctrineUserRepository
    
    App\Infrastructure\Service\Interface\ResponseServiceinterface:
        alias: App\Infrastructure\Service\ResponseService
    
    
    App\Infrastructure\Repository\DoctrineUserRepository: 

    App\Infrastructure\Service\ResponseService:

    App\Infrastructure\Types\EmailType:
        tags:
            - { name: doctrine.dbal.type, type: email }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
